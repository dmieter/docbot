import os
import random
import telebot
from langchain.prompts import PromptTemplate
import chromadb
from langchain.vectorstores import Chroma
from datetime import datetime
from telebot import types
import doc_core as dc
import multi_level_bot as mlb
import moderator as mdr
import yaml
import dpo_excel_update as dpu


#BOT_TOKEN = os.environ.get('DOCBOT_TOKEN')
#bot = telebot.TeleBot(BOT_TOKEN)
bot = None

config = {}
chat_history = {}
moderator = mdr.Moderator()
main_talk_bot = None

def load_config():
  global config
  
  with open('config/config_dpo.yml', 'r') as file:
      config = yaml.safe_load(file)
      print("config reloaded: {}".format(config))



def init():
  load_config()

  global bot
  bot = telebot.TeleBot(config['bot_token'])
  os.environ.setdefault("GIGACHAT_CREDENTIALS", config['giga_creds'])

  global main_talk_bot
  main_talk_bot = mlb.create_talk_bot(config)


init()


@bot.message_handler(commands=['ban'])
def ban_user(message):
    try:
        if 'admins' in config.keys() and message.chat.id in config['admins']:
          user_id, date_str = message.text.split()[1:3]
          datetime.strptime(date_str, '%Y%m%d')  # Validate date format
          
          moderator.ban_user(int(user_id), date_str)

          bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ {date_str}.")
    except Exception as e:
        print("{} {}".format(str(e), message.text))

@bot.message_handler(commands=['unban'])
def unban_user(message):
    try:
        if 'admins' in config.keys() and message.chat.id in config['admins']:
          user_id = message.text.split()[1]
          moderator.unban_user(int(user_id))
          bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        print("{} {}".format(str(e), message.text))        

@bot.message_handler(content_types=['document'])
def handle_file(message):
    try:
      file_info = bot.get_file(message.document.file_id)
      downloaded_file = bot.download_file(file_info.file_path)
      #bot.reply_to(message, downloaded_file)
      with open("upload/dpo/dpo.xlsx", 'wb') as new_file:
          new_file.write(downloaded_file)

      dpu.process_file("upload/dpo/dpo.xlsx")
      reload(message)
    except Exception as e:
      bot.reply_to(message, "–û–ø–∞–Ω—å–∫–∏, –≤–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {}".format(str(e)))


@bot.message_handler(commands=['reload'])
def reload(message):
  try:
    if 'admins' in config.keys() and message.chat.id in config['admins']:
      load_config()
      global main_talk_bot
      main_talk_bot = mlb.create_talk_bot(config)
      
      bot.reply_to(message, "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
  except Exception as e:
        print("{} {}".format(str(e), message.text))

@bot.message_handler(commands=['start'])
def start(message):
  chat_history.clear()
  markup = types.ReplyKeyboardRemove()
  bot.send_message(message.from_user.id, """üññ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –î–ü–û! –±—É–¥—É —Ä–∞–¥ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.""", reply_markup=markup)


DPO_LINKS = {'–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏' : 'https://mpei.ru/Education/educationalprograms/2023/Lists/DopPrograms2023/disp.aspx?ID=982',
             '–¢–µ–ø–ª–æ–≤—ã–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏' : 'https://mpei.ru/Education/educationalprograms/2023/Lists/DopPrograms2023/disp.aspx?ID=1476',
             '–≠–ª–µ–∫—Ç—Ä–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ' : 'https://mpei.ru/Education/educationalprograms/2023/Lists/DopPrograms2023/disp.aspx?ID=1199',
             '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –∏ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ' : 'https://mpei.ru/Education/educationalprograms/2023/Lists/DopPrograms2023/disp.aspx?ID=1026',
             '–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö, –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã—Ö –∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫—É–ø–æ–∫' : 'https://mpei.ru/Education/educationalprograms/2023/Lists/DopPrograms2023/disp.aspx?ID=1309',
             '–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –∑–∞–∫—É–ø–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤, —Ä–∞–±–æ—Ç, —É—Å–ª—É–≥' : 'https://mpei.ru/Education/educationalprograms/2023/Lists/DopPrograms2023/disp.aspx?ID=1315',
             '–û–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –Ω–∞–ª–∞–¥–∫–∞, –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –º–µ—Ç–æ–¥—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞' : 'https://mpei.ru/Education/educationalprograms/2023/Lists/DopPrograms2023/disp.aspx?ID=1518',
             '–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è' : 'https://mpei.ru/Education/educationalprograms/2023/Lists/DopPrograms2023/disp.aspx?ID=1284',
             '–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ –≤ —Å—Ñ–µ—Ä–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏' : 'https://mpei.ru/Education/educationalprograms/2023/Lists/DopPrograms2023/disp.aspx?ID=1068',
             '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–º–µ—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏':  'https://mpei.ru/Education/educationalprograms/2023/Lists/DopPrograms2023/disp.aspx?ID=1319',
             '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–º–∏ –∑–∞–∫—É–ø–∫–∞–º–∏' : 'https://mpei.ru/Education/educationalprograms/2023/Lists/DopPrograms2023/disp.aspx?ID=1176',
             '–£–ª—å—Ç—Ä–∞–∑–≤—É–∫–æ–≤–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º—ã –Ω–∞ —Ñ–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—à—ë—Ç–∫–∞—Ö HARFANG VEO' : 'https://mpei.ru/Education/educationalprograms/2023/Lists/DopPrograms2023/disp.aspx?ID=1175',
             '–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ –∏ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞' : 'https://mpei.ru/Education/educationalprograms/2023/Lists/DopPrograms2023/disp.aspx?ID=1444',
             '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ —Å–≤–æ–π—Å—Ç–≤ –∫—Ä–∏—Å—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤' : 'https://mpei.ru/Education/educationalprograms/2023/Lists/DopPrograms2023/disp.aspx?ID=996'}
def prepare_dpo_links(answer):
  references_str = ""
  reply_markup = None
  button_messages = ["–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –æ–±—É—á–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ", "–ö–∞–∫–∏–µ —Å—Ä–æ–∫–∏ –æ–±—É—á–µ–Ω–∏—è –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ", "–î–∞–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –ª–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"]
    

  for key, value in DPO_LINKS.items():
    if key.lower() in answer.lower():
      if not references_str:
        references_str = "\n–ü–æ–¥—Ä–æ–±–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –ø–æ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–∏–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º:\n"
      references_str += "<a href='{}'>{}</a>\n".format(value, key)

      if not reply_markup:
         reply_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
      btn = types.KeyboardButton("–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ " + key)
      reply_markup.add(btn)
      btn = types.KeyboardButton(random.choice(button_messages) + " " + key)
      reply_markup.add(btn)
      

  return references_str, reply_markup
  

def prepare_links(answer, docs):
  references_str = "\n"
  references = set()

  for doc in docs:
    if "url" in doc.metadata.keys() and doc.metadata["url"]:
      #references.add(doc.metadata["url"])
      references.add("<a href='{}'>{}</a>".format(doc.metadata["url"], doc.metadata["name"]))

  if len(references) > 0:
    references_str += '\n'.join(list(references))

  dpo_links, _ = prepare_dpo_links(answer)
  references_str += dpo_links

  return references_str

def addContactsIfNeeded(answer):
  if "–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" in answer.lower() or "—Å–≤—è–∑–∞—Ç—å—Å—è" in answer.lower() or "–æ–±—Ä–∞—Ç–∏—Ç—å—Å—è" in answer.lower() or "–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç" in answer.lower() or "—Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç" in answer.lower() or "—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç" in answer.lower():
      return "\n\n<b>–ü–æ –æ–±—â–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ </b> –ë–µ–ª–æ–±–æ—Ä–æ–¥–æ–≤—É –ê–ª–µ–∫—Å–∞–Ω–¥—Ä—É –ì–µ–Ω–Ω–∞–¥—å–µ–≤–∏—á—É Email: BeloborodovAG@mpei.ru"
  else:
      return ""


def log_answer(name, question, answer):
  current_time_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
  delimeter = "\n===============================\n"
  with open('question_log.txt', 'a') as f:
    f.write("{} ({}): {}\n\n{}{}".format(name, current_time_str, question, answer, delimeter))

from telebot import types
def prepare_answer(question, knowledge):
  reply_markup = None
  try:
    answer = main_talk_bot.ask(question)
    answer += addContactsIfNeeded(answer)
    #answer += prepare_links(answer, [])
    dpo_links, reply_markup = prepare_dpo_links(answer)
    answer += dpo_links
    
  except Exception as e:
    answer = "–û–ø–∞–Ω—å–∫–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–∏ÃÜ—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å :("
    log_answer(None, question, "–û—à–∏–±–∫–∞: {} {}".format(e.__str__(), e))
    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å '{}': {} {}".format(question, e.__str__(), e))

  return answer, reply_markup

def trim_question(question):
  return trim_text(question, 800)

def trim_text(text, size):
  return text[:size] if len(text) > size else text

def is_additional_question(question):
  keywords = ["–∞", "–∏", "–Ω—É", "—Ç–æ–ª—å–∫–æ", "—Ö–æ—Ä–æ—à–æ", "—Ö–æ—Ä–æ—à–æ,", "–Ω–µ—Ç", "–Ω–µ—Ç,"]
  trimmed_question = question.strip().lower()
  if len(trimmed_question) > 0:
    first_word = trimmed_question.split()[0]
    return first_word in keywords or trimmed_question[0] == '>'
  else:
    return False
  
def prepare_question_chain(message):
  global chat_history

  prev_messages = []
  if message.chat.id in chat_history.keys():
    prev_messages = chat_history[message.chat.id]

  trimmed_question = trim_question(message.text)

  # if no history or question isnt additional then just create a new question thread and return current question
  if len(prev_messages) == 0 or not is_additional_question(trimmed_question):
    chat_history[message.chat.id] = [trimmed_question]
    return trimmed_question
  
  # else need to retrieve previous messages as context and add new question to the end
  thread = '\n'.join(prev_messages)
  chat_history[message.chat.id].append(trimmed_question)

  return '{} \n {}'.format(thread, trimmed_question)
  


@bot.message_handler(func=lambda msg: True)
def general_question(message):

  chat = bot.get_chat(message.chat.id)
  username = message.from_user.username if message.from_user.username is not None else message.chat.username
  question = message.text
  print(">>>>>>>>>>>>>>> QQQ: " + str(datetime.now()) + " " + str(message.chat.id) + ": " + question)
  

  is_allowed, description = moderator.is_question_allowed(message.chat.id, config)
  if not is_allowed:
    log_answer("{} ({})".format(username, chat.id), question, description)
    bot.reply_to(message, description)
    return

  question_with_context = prepare_question_chain(message)
  #print("Question with context: {}".format(question_with_context))

  answer, reply_markup = prepare_answer(question_with_context, None)
  log_answer("{} ({})".format(username, chat.id), question_with_context, answer)
  
  #print(">>>>>>>>>>>>>>> AAA " + str(message.chat.id) + ": " + answer)
  #bot.reply_to(message, answer + suffix, parse_mode = 'Markdown')

  bot.reply_to(message, trim_text(answer, 3600), parse_mode='HTML', reply_markup = reply_markup)

#init()
print(str(datetime.now()) + " Marti Level DPO Doc is here!")
bot.infinity_polling()